本关任务：实现归并排序，算法如下：
Procedure sort(A,low,high)   // 对数组A[low..high]排序
1   if high-low>0
2       mid=(low+high)/2
3       sort(A,low,mid)
4       sort(A,mid+1,high)
5       merge(A, low, mid, high)     // merge实现时可以使用一个辅助数组
6   endif
过程sort(A,low,high)在给A[low..high]这一组数进行排序时，首先判别问题的规模是否为1，如果是的，则原问题是一个规模为1的问题，无需做任何处理。
当问题规模超过1时，假设为n，则在过程sort的第3、4行分别利用递归对规模为n/2的子数组排好序，然后再通过调用merge将两个长度为n/2的有序数组合并形成一个长度为n的有序数组，即由两个规模为n/2的子问题的解答得到了规模为n的问题的解答。
#include<iostream>
using namespace std;
// Function to Merge Arrays L and R into A.
// lefCount = number of elements in L
// rightCount = number of elements in R.
void Merge(int *A,int *L,int leftCount,int *R,int rightCount) {
	int i,j,k;
 
	// i - to mark the index of left aubarray (L)
	// j - to mark the index of right sub-raay (R)
	// k - to mark the index of merged subarray (A)
	i = 0; j = 0; k =0;
 
	while(i<leftCount && j< rightCount) {
		if(L[i]  < R[j]) A[k++] = L[i++];
		else A[k++] = R[j++];
	}
	while(i < leftCount) A[k++] = L[i++];
	while(j < rightCount) A[k++] = R[j++];
}
 
// Recursive function to sort an array of integers.
void merge_Sort(int *A,int n) {
	int mid,i, *L, *R;
	if(n==1) return; // base condition. If the array has only one element, do nothing.
 
	mid = n/2;  // find the mid index.
 
	// create left and right subarrays
	// mid elements (from index 0 till mid-1) should be part of left sub-array
	// and (n-mid) elements (from mid to n-1) will be part of right sub-array
	L = new int[mid];
	R = new int [n - mid];
 
	for(i = 0;i<mid;i++) L[i] = A[i]; // creating left subarray
	for(i = mid;i<n;i++) R[i-mid] = A[i]; // creating right subarray
 
	merge_Sort(L,mid);  // sorting the left subarray
	merge_Sort(R,n-mid);  // sorting the right subarray
	Merge(A,L,mid,R,n-mid);  // Merging L and R into A as sorted list.
	// the delete operations is very important
	delete [] R;
	delete [] L;
}

int main()
{
    int n, num[100];
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>num[i];
    }
    merge_Sort(num,n);
    for(int i=0;i<n;i++){
        cout<<num[i]<<" ";
    }
	return 0;
}

